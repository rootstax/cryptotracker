{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NumberFormat","require","AnotherPage","NotFound","Home","props","callApi","a","async","fetch","response","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","post","state","text","setState","responseToPost","cryptos","axios","get","then","res","data","console","log","catch","error","this","express","err","className","Object","keys","map","key","id","value","USD","displayType","decimalPrecision","thousandSeparator","prefix","onSubmit","type","onChange","target","Component","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAIIA,EAAeC,EAAQ,IAKrBC,EAAc,kBAAM,6CACpBC,EAAW,kBAAM,8CAEjBC,E,YAEJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA4BRC,QAAU,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACeE,MAAM,eADrB,cACFC,EADE,kBAAAH,EAAA,MAEWG,EAASC,QAFpB,UAEFC,EAFE,OAIgB,MAApBF,EAASG,OAJL,sBAI2BC,MAAMF,EAAKG,SAJtC,gCAMDH,GANC,sCA7BS,EAsCnBI,aAAe,SAAMC,GAAN,iBAAAV,EAAAC,OAAA,uDACbS,EAAEC,iBADW,WAAAX,EAAA,MAEUE,MAAM,aAAc,CACzCU,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBR,KAAMS,KAAKC,UAAU,CAAEC,KAAM,EAAKC,MAAMD,UAP7B,cAEPb,EAFO,kBAAAH,EAAA,MASMG,EAASe,QATf,OASPb,EATO,OAWb,EAAKc,SAAS,CAAEC,eAAgBf,IAXnB,sCAnCb,EAAKY,MAAQ,CACXI,QAAS,GACTlB,SAAU,GACVa,KAAM,GACNI,eAAgB,IAPD,E,iFAWE,IAAD,OAEhBE,IAAMC,IAAI,iFACPC,MAAK,SAAAC,GAEJ,IAAMJ,EAAUI,EAAIC,KACpBC,QAAQC,IAAIP,GACZ,EAAKF,SAAS,CAACE,QAASA,OAEzBQ,OAAM,SAAAC,GACLH,QAAQC,IAAIE,MAGdC,KAAKhC,UACFyB,MAAK,SAAAC,GAAG,OAAI,EAAKN,SAAS,CAAEhB,SAAUsB,EAAIO,aAC1CH,OAAM,SAAAI,GAAG,OAAIN,QAAQC,IAAIK,Q,+BA0BxB,IAAD,OACP,OACE,yBAAKC,UAAU,OACf,6BACGC,OAAOC,KAAKL,KAAKd,MAAMI,SAASgB,KAAI,SAACC,GAAD,OAEnC,yBAAKC,GAAG,oBACN,0BAAML,UAAU,QAAQI,GACxB,0BAAMJ,UAAU,SAAQ,kBAACzC,EAAD,CAAc+C,MAAO,EAAKvB,MAAMI,QAAQiB,GAAKG,IAAKC,YAAa,OAAQC,iBAAkB,EAAGC,mBAAmB,EAAMC,OAAQ,YAKzJ,6BAEQ,2BAAId,KAAKd,MAAMd,UACf,0BAAM2C,SAAUf,KAAKtB,cACnB,2BACE,oDAEF,2BACEsC,KAAK,OACLP,MAAOT,KAAKd,MAAMD,KAClBgC,SAAU,SAAAtC,GAAC,OAAI,EAAKS,SAAS,CAAEH,KAAMN,EAAEuC,OAAOT,WAEhD,4BAAQO,KAAK,UAAb,WAEF,2BAAIhB,KAAKd,MAAMG,sB,GAjFZ8B,aAgHJC,EAvBH,kBACV,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,kBAAT,mBAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW1D,IACjC,kBAAC,IAAD,CAAOwD,KAAK,iBAAiBE,UAAW5D,IACxC,kBAAC,IAAD,CAAO4D,UAAW3D,QC1GN4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.db38a83a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport axios from 'axios';\nvar NumberFormat = require('react-number-format');\n\n\n\n\nconst AnotherPage = () => <h1>Another Page</h1>;\nconst NotFound = () => <h1>404 Not Found</h1>;\n\nclass Home extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cryptos: [],\n      response: '',\n      post: '',\n      responseToPost: '',\n    };\n  }\n\n  componentDidMount() {\n      // Make a request for a user with a given ID\n      axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,IOT&tsyms=USD')\n        .then(res => {\n          // handle success\n          const cryptos = res.data;\n          console.log(cryptos);\n          this.setState({cryptos: cryptos});\n        })\n        .catch(error => {\n          console.log(error);\n        })\n\n        this.callApi()\n          .then(res => this.setState({ response: res.express }))\n          .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n\n    this.setState({ responseToPost: body });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n      <div>\n        {Object.keys(this.state.cryptos).map((key) => (\n\n          <div id=\"crypto-container\">\n            <span className=\"left\">{key}</span>\n            <span className=\"right\"><NumberFormat value={this.state.cryptos[key].USD} displayType={'text'} decimalPrecision={2} thousandSeparator={true} prefix={'$'} /></span>\n          </div>\n\n        ))}\n        </div>\n        <div>\n\n                <p>{this.state.response}</p>\n                <form onSubmit={this.handleSubmit}>\n                  <p>\n                    <strong>Post to Server:</strong>\n                  </p>\n                  <input\n                    type=\"text\"\n                    value={this.state.post}\n                    onChange={e => this.setState({ post: e.target.value })}\n                  />\n                  <button type=\"submit\">Submit</button>\n                </form>\n                <p>{this.state.responseToPost}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nconst App = () => (\n  <Router>\n    <div>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/another-page/\">Another Page</Link>\n          </li>\n        </ul>\n      </nav>\n\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/another-page/\" component={AnotherPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}