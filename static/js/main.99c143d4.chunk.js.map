{"version":3,"sources":["../../node_modules/web3-eth-accounts/src sync","utils/getWeb3.js","utils/theme.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getWeb3","Promise","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","theme","createMuiTheme","palette","primary","dark","blueGrey","light","main","secondary","green","useStyles","makeStyles","root","flexGrow","Header","classes","className","AppBar","position","color","Toolbar","Grid","item","xs","Typography","variant","GAS","GAS_PRICE","App","state","accounts","contract","randomLow","randomHigh","resultReceived","result","componentDidMount","loopRefresh","component","refreshState","setTimeout","eth","getAccounts","net","getId","networkId","deployedNetwork","MyContract","networks","Contract","abi","address","setState","on","newAccounts","alert","error","methods","call","toString","handleUpdateForm","name","value","handleRequestResult","makeRequest","send","from","gas","gasPrice","handleResetResult","resetResult","this","ThemeProvider","style","marginTop","container","TextField","onChange","target","Button","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99c143d4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 462;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import green from \"@material-ui/core/colors/green\";\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      dark: blueGrey[900],\n      light: blueGrey[600],\n      main: blueGrey[800]\n    },\n    secondary: {\n      dark: green[900],\n      light: green[500],\n      main: green[800]\n    }\n  }\n});\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Grid } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  }\n});\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"primary\">\n        <Toolbar>\n          <Grid item xs>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Honeycomb Workshop\n            </Typography>\n          </Grid>\n          <Grid item xs>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Adding a React Front-end to your Dapp\n            </Typography>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Button, Typography, Grid, TextField } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nimport MyContract from \"./contracts/MyContract.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport { theme } from \"./utils/theme\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\nconst GAS = 500000;\nconst GAS_PRICE = \"20000000000\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    randomLow: 1,\n    randomHigh: 6,\n    resultReceived: false,\n    result: \"0\"\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n\n      const accounts = await web3.eth.getAccounts();\n\n      const networkId = await web3.eth.net.getId();\n      if (networkId !== 3) {\n        throw new Error(\"Select the Ropsten network from your MetaMask plugin\");\n      }\n      const deployedNetwork = MyContract.networks[networkId];\n      const contract = new web3.eth.Contract(\n        MyContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n\n      this.setState({ web3, accounts, contract });\n\n      window.ethereum.on(\"accountsChanged\", async accounts => {\n        const newAccounts = await web3.eth.getAccounts();\n        this.setState({ accounts: newAccounts });\n      });\n\n      // Refresh on-chain data every 1 second\n      const component = this;\n      async function loopRefresh() {\n        await component.refreshState();\n        setTimeout(loopRefresh, 1000);\n      }\n      loopRefresh();\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  refreshState = async () => {\n    const resultReceived = await this.state.contract.methods\n      .resultReceived()\n      .call();\n    const result = (\n      await this.state.contract.methods.result().call()\n    ).toString();\n    this.setState({ resultReceived, result });\n  };\n\n  handleUpdateForm = (name, value) => {\n    this.setState({ [name]: value });\n  };\n\n  handleRequestResult = async () => {\n    await this.state.contract.methods\n      .makeRequest(this.state.randomLow.toString(), this.state.randomHigh.toString())\n      .send({ from: this.state.accounts[0], gas: GAS, gasPrice: GAS_PRICE });\n  };\n\n  handleResetResult = async () => {\n    await this.state.contract.methods\n      .resetResult()\n      .send({ from: this.state.accounts[0], gas: GAS, gasPrice: GAS_PRICE });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <ThemeProvider theme={theme}>\n          <div className=\"App\">\n            <Header />\n\n            <Typography>Loading Web3, accounts, and contract...</Typography>\n          </div>\n        </ThemeProvider>\n      );\n    }\n    return (\n      <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <Header />\n\n          <Typography variant=\"h5\" style={{ marginTop: 32 }}>\n            {`Oracle is going to return an integer between ${this.state.randomLow} and ${this.state.randomHigh}`}\n          </Typography>\n\n          <Grid container style={{ marginTop: 32 }}>\n            <Grid item xs>\n              <Typography variant=\"h5\" style={{ marginTop: 32 }}>\n                Lower limit\n              </Typography>\n            </Grid>\n            <Grid item xs>\n              <Typography variant=\"h5\" style={{ marginTop: 32 }}>\n                Higher limit\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <Grid container style={{ marginTop: 32 }}>\n            <Grid item xs>\n              <TextField\n                id=\"bet-amount\"\n                className=\"input\"\n                value={this.state.randomLow}\n                onChange={e =>\n                  this.handleUpdateForm(\"randomLow\", e.target.value)\n                }\n              />\n            </Grid>\n            <Grid item xs>\n              <TextField\n                id=\"bet-amount\"\n                className=\"input\"\n                value={this.state.randomHigh}\n                onChange={e =>\n                  this.handleUpdateForm(\"randomHigh\", e.target.value)\n                }\n              />\n            </Grid>\n          </Grid>\n\n          <Typography variant=\"h5\" style={{ marginTop: 32 }}>\n            {`Result received: ${this.state.resultReceived}`}\n          </Typography>\n\n          <Typography variant=\"h5\" style={{ marginTop: 32 }}>\n            {`Result: ${this.state.result}`}\n          </Typography>\n\n          <Grid container style={{ marginTop: 32 }}>\n            <Grid item xs>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => this.handleResetResult()}\n              >\n                Reset Result\n              </Button>\n            </Grid>\n            <Grid item xs>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => this.handleRequestResult()}\n              >\n                Request Result\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}